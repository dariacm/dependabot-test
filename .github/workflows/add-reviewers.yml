name: Add Reviewers

on:
  workflow_run:
    workflows: [ 'ci', 'Ensure labels' ]
    types:
      - completed

jobs:
  add_reviewers:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' && github.event.workflow_run.conclusion == 'failure' }}
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Read reviewers and teams from DEPENDABOTREVIEWERS.json
        id: read-reviewers
        run: |
          teams=$(jq -r '.teams | join(",")' DEPENDABOTREVIEWERS.json)
          users=$(jq -r '.users | join(",")' DEPENDABOTREVIEWERS.json)
          echo "teams=$teams" >> $GITHUB_ENV
          echo "users=$users" >> $GITHUB_ENV
      - name: Print out reviewers and teams
        run: |
          echo "Team Reviewers: ${{ env.teams }}"
          echo "User Reviewers: ${{ env.users }}"
      - name: Add reviewers and comment
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const { data: run } = await github.rest.actions.getWorkflowRun({
              owner,
              repo,
              run_id: context.payload.workflow_run.id
            });
            const pull_number = run.pull_requests[0].number;
            
            // Check if review has already been requested
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number
            });
            
            if (pr.requested_reviewers.length > 0 || pr.requested_teams.length > 0) {
              console.log('Reviews already requested for this PR. Skipping.');
              process.exit(0);
            }

            const reviewers = '${{ env.users }}'.split(',').filter(user => user);
            const team_reviewers = '${{ env.teams }}'.split(',').filter(team => team);
      
            const requestPayload = {
              owner,
              repo,
              pull_number,
            };
            
            if (team_reviewers.length === 0 && reviewers.length === 0) {
              console.log('No reviewers or team reviewers found. Skipping.');
              process.exit(0);
            }
              
              if (team_reviewers.length > 0) {
              requestPayload.team_reviewers = team_reviewers;
            }
              
              if (reviewers.length > 0) {
              requestPayload.reviewers = reviewers;
            }
      
            await github.rest.pulls.requestReviewers(requestPayload);
            
            // Check if comment already exists
            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: pull_number
            });
            
            const commentExists = comments.some(comment => 
              comment.body === 'dependabot was not able to automerge this pull request. Humans, please help ðŸ¤–'
            );
            
            if (!commentExists) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: 'dependabot was not able to automerge this pull request. Humans, please help ðŸ¤–',
              });
            } else {
                console.log('Comment already posted for this PR. Skipping.');
            }
